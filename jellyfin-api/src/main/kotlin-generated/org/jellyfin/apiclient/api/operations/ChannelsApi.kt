// !!        WARNING
// !! DO NOT EDIT THIS FILE
//
// This file is generated by the openapi-generator module and is not meant for manual changes.
// Please read the README.md file in the openapi-generator module for additional information.
package org.jellyfin.apiclient.api.operations

import java.util.UUID
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.collections.List
import org.jellyfin.apiclient.api.client.KtorClient
import org.jellyfin.apiclient.api.client.Response
import org.jellyfin.apiclient.model.api.BaseItemDtoQueryResult
import org.jellyfin.apiclient.model.api.ChannelFeatures
import org.jellyfin.apiclient.model.api.ItemFields
import org.jellyfin.apiclient.model.api.ItemFilter

public class ChannelsApi(
	private val api: KtorClient
) {
	/**
	 * Gets available channels.
	 *
	 * @param userId User Id to filter by. Use System.Guid.Empty to not filter by user.
	 * @param startIndex Optional. The record index to start at. All items with a lower index will be
	 * dropped from the results.
	 * @param limit Optional. The maximum number of records to return.
	 * @param supportsLatestItems Optional. Filter by channels that support getting latest items.
	 * @param supportsMediaDeletion Optional. Filter by channels that support media deletion.
	 * @param isFavorite Optional. Filter by channels that are favorite.
	 */
	public suspend fun getChannels(
		userId: UUID? = null,
		startIndex: Int? = null,
		limit: Int? = null,
		supportsLatestItems: Boolean? = null,
		supportsMediaDeletion: Boolean? = null,
		isFavorite: Boolean? = null
	): Response<BaseItemDtoQueryResult> {
		val pathParameters = emptyMap<String, Any?>()
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["userId"] = userId
		queryParameters["startIndex"] = startIndex
		queryParameters["limit"] = limit
		queryParameters["supportsLatestItems"] = supportsLatestItems
		queryParameters["supportsMediaDeletion"] = supportsMediaDeletion
		queryParameters["isFavorite"] = isFavorite
		val data = null
		val response = api.`get`<BaseItemDtoQueryResult>("/Channels", pathParameters, queryParameters,
				data)
		return response
	}

	/**
	 * Get channel features.
	 *
	 * @param channelId Channel id.
	 */
	public suspend fun getChannelFeatures(channelId: UUID): Response<ChannelFeatures> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["channelId"] = channelId
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.`get`<ChannelFeatures>("/Channels/{channelId}/Features", pathParameters,
				queryParameters, data)
		return response
	}

	/**
	 * Get channel items.
	 *
	 * @param channelId Channel Id.
	 * @param folderId Optional. Folder Id.
	 * @param userId Optional. User Id.
	 * @param startIndex Optional. The record index to start at. All items with a lower index will be
	 * dropped from the results.
	 * @param limit Optional. The maximum number of records to return.
	 * @param sortOrder Optional. Sort Order - Ascending,Descending.
	 * @param filters Optional. Specify additional filters to apply.
	 * @param sortBy Optional. Specify one or more sort orders, comma delimited. Options: Album,
	 * AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount,
	 * PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime.
	 * @param fields Optional. Specify additional fields of information to return in the output.
	 */
	public suspend fun getChannelItems(
		channelId: UUID,
		folderId: UUID? = null,
		userId: UUID? = null,
		startIndex: Int? = null,
		limit: Int? = null,
		sortOrder: String? = null,
		filters: List<ItemFilter>? = emptyList(),
		sortBy: String? = null,
		fields: List<ItemFields>? = emptyList()
	): Response<BaseItemDtoQueryResult> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["channelId"] = channelId
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["folderId"] = folderId
		queryParameters["userId"] = userId
		queryParameters["startIndex"] = startIndex
		queryParameters["limit"] = limit
		queryParameters["sortOrder"] = sortOrder
		queryParameters["filters"] = filters
		queryParameters["sortBy"] = sortBy
		queryParameters["fields"] = fields
		val data = null
		val response = api.`get`<BaseItemDtoQueryResult>("/Channels/{channelId}/Items", pathParameters,
				queryParameters, data)
		return response
	}

	/**
	 * Get all channel features.
	 */
	public suspend fun getAllChannelFeatures(): Response<List<ChannelFeatures>> {
		val pathParameters = emptyMap<String, Any?>()
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.`get`<List<ChannelFeatures>>("/Channels/Features", pathParameters,
				queryParameters, data)
		return response
	}

	/**
	 * Gets latest channel items.
	 *
	 * @param userId Optional. User Id.
	 * @param startIndex Optional. The record index to start at. All items with a lower index will be
	 * dropped from the results.
	 * @param limit Optional. The maximum number of records to return.
	 * @param filters Optional. Specify additional filters to apply.
	 * @param fields Optional. Specify additional fields of information to return in the output.
	 * @param channelIds Optional. Specify one or more channel id's, comma delimited.
	 */
	public suspend fun getLatestChannelItems(
		userId: UUID? = null,
		startIndex: Int? = null,
		limit: Int? = null,
		filters: List<ItemFilter>? = emptyList(),
		fields: List<ItemFields>? = emptyList(),
		channelIds: List<UUID>? = emptyList()
	): Response<BaseItemDtoQueryResult> {
		val pathParameters = emptyMap<String, Any?>()
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["userId"] = userId
		queryParameters["startIndex"] = startIndex
		queryParameters["limit"] = limit
		queryParameters["filters"] = filters
		queryParameters["fields"] = fields
		queryParameters["channelIds"] = channelIds
		val data = null
		val response = api.`get`<BaseItemDtoQueryResult>("/Channels/Items/Latest", pathParameters,
				queryParameters, data)
		return response
	}
}
