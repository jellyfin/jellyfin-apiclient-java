// !!        WARNING
// !! DO NOT EDIT THIS FILE
//
// This file is generated by the openapi-generator module and is not meant for manual changes.
// Please read the README.md file in the openapi-generator module for additional information.
package org.jellyfin.apiclient.api.operations

import java.time.LocalDateTime
import java.util.UUID
import kotlin.Any
import kotlin.Boolean
import kotlin.Double
import kotlin.Long
import kotlin.String
import kotlin.Unit
import kotlin.collections.List
import org.jellyfin.apiclient.api.client.KtorClient
import org.jellyfin.apiclient.api.client.Response
import org.jellyfin.apiclient.model.api.GroupInfoView

public class SyncPlayApi(
	private val api: KtorClient
) {
	/**
	 * Request group wait in SyncPlay group while buffering.
	 *
	 * @param when When the request has been made by the client.
	 * @param positionTicks The playback position in ticks.
	 * @param bufferingDone Whether the buffering is done.
	 */
	public suspend fun syncPlayBuffering(
		`when`: LocalDateTime,
		positionTicks: Long,
		bufferingDone: Boolean
	): Response<Unit> {
		val pathParameters = emptyMap<String, Any?>()
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["when"] = `when`
		queryParameters["positionTicks"] = positionTicks
		queryParameters["bufferingDone"] = bufferingDone
		val data = null
		val response = api.post<Unit>("/SyncPlay/Buffering", pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Join an existing SyncPlay group.
	 *
	 * @param groupId The sync play group id.
	 */
	public suspend fun syncPlayJoinGroup(groupId: UUID): Response<Unit> {
		val pathParameters = emptyMap<String, Any?>()
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["groupId"] = groupId
		val data = null
		val response = api.post<Unit>("/SyncPlay/Join", pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Leave the joined SyncPlay group.
	 */
	public suspend fun syncPlayLeaveGroup(): Response<Unit> {
		val pathParameters = emptyMap<String, Any?>()
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.post<Unit>("/SyncPlay/Leave", pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Gets all SyncPlay groups.
	 *
	 * @param filterItemId Optional. Filter by item id.
	 */
	public suspend fun syncPlayGetGroups(filterItemId: UUID? = null): Response<List<GroupInfoView>> {
		val pathParameters = emptyMap<String, Any?>()
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["filterItemId"] = filterItemId
		val data = null
		val response = api.`get`<List<GroupInfoView>>("/SyncPlay/List", pathParameters, queryParameters,
				data)
		return response
	}

	/**
	 * Create a new SyncPlay group.
	 */
	public suspend fun syncPlayCreateGroup(): Response<Unit> {
		val pathParameters = emptyMap<String, Any?>()
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.post<Unit>("/SyncPlay/New", pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Request pause in SyncPlay group.
	 */
	public suspend fun syncPlayPause(): Response<Unit> {
		val pathParameters = emptyMap<String, Any?>()
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.post<Unit>("/SyncPlay/Pause", pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Update session ping.
	 *
	 * @param ping The ping.
	 */
	public suspend fun syncPlayPing(ping: Double): Response<Unit> {
		val pathParameters = emptyMap<String, Any?>()
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["ping"] = ping
		val data = null
		val response = api.post<Unit>("/SyncPlay/Ping", pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Request play in SyncPlay group.
	 */
	public suspend fun syncPlayPlay(): Response<Unit> {
		val pathParameters = emptyMap<String, Any?>()
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.post<Unit>("/SyncPlay/Play", pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Request seek in SyncPlay group.
	 *
	 * @param positionTicks The playback position in ticks.
	 */
	public suspend fun syncPlaySeek(positionTicks: Long): Response<Unit> {
		val pathParameters = emptyMap<String, Any?>()
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["positionTicks"] = positionTicks
		val data = null
		val response = api.post<Unit>("/SyncPlay/Seek", pathParameters, queryParameters, data)
		return response
	}
}
