// !!        WARNING
// !! DO NOT EDIT THIS FILE
//
// This file is generated by the openapi-generator module and is not meant for manual changes.
// Please read the README.md file in the openapi-generator module for additional information.
package org.jellyfin.apiclient.api.operations

import io.ktor.utils.io.ByteReadChannel
import kotlin.Any
import kotlin.String
import org.jellyfin.apiclient.api.client.KtorClient
import org.jellyfin.apiclient.api.client.Response
import org.jellyfin.apiclient.model.api.ControlResponse

public class DlnaServerApi(
	private val api: KtorClient
) {
	/**
	 * Gets Dlna media receiver registrar xml.
	 *
	 * @param serverId Server UUID.
	 */
	public suspend fun getConnectionManager(serverId: String): Response<String> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["serverId"] = serverId
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.`get`<String>("/Dlna/{serverId}/ConnectionManager", pathParameters,
				queryParameters, data)
		return response
	}

	/**
	 * Gets Dlna media receiver registrar xml.
	 *
	 * @param serverId Server UUID.
	 */
	public suspend fun getConnectionManager2(serverId: String): Response<String> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["serverId"] = serverId
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.`get`<String>("/Dlna/{serverId}/ConnectionManager/ConnectionManager",
				pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Gets Dlna media receiver registrar xml.
	 *
	 * @param serverId Server UUID.
	 */
	public suspend fun getConnectionManager3(serverId: String): Response<String> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["serverId"] = serverId
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.`get`<String>("/Dlna/{serverId}/ConnectionManager/ConnectionManager.xml",
				pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Process a connection manager control request.
	 *
	 * @param serverId Server UUID.
	 */
	public suspend fun processConnectionManagerControlRequest(serverId: String):
			Response<ControlResponse> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["serverId"] = serverId
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.post<ControlResponse>("/Dlna/{serverId}/ConnectionManager/Control",
				pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Gets Dlna content directory xml.
	 *
	 * @param serverId Server UUID.
	 */
	public suspend fun getContentDirectory(serverId: String): Response<String> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["serverId"] = serverId
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.`get`<String>("/Dlna/{serverId}/ContentDirectory", pathParameters,
				queryParameters, data)
		return response
	}

	/**
	 * Gets Dlna content directory xml.
	 *
	 * @param serverId Server UUID.
	 */
	public suspend fun getContentDirectory2(serverId: String): Response<String> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["serverId"] = serverId
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.`get`<String>("/Dlna/{serverId}/ContentDirectory/ContentDirectory",
				pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Gets Dlna content directory xml.
	 *
	 * @param serverId Server UUID.
	 */
	public suspend fun getContentDirectory3(serverId: String): Response<String> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["serverId"] = serverId
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.`get`<String>("/Dlna/{serverId}/ContentDirectory/ContentDirectory.xml",
				pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Process a content directory control request.
	 *
	 * @param serverId Server UUID.
	 */
	public suspend fun processContentDirectoryControlRequest(serverId: String):
			Response<ControlResponse> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["serverId"] = serverId
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.post<ControlResponse>("/Dlna/{serverId}/ContentDirectory/Control",
				pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Get Description Xml.
	 *
	 * @param serverId Server UUID.
	 */
	public suspend fun getDescriptionXml(serverId: String): Response<String> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["serverId"] = serverId
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.`get`<String>("/Dlna/{serverId}/description", pathParameters, queryParameters,
				data)
		return response
	}

	/**
	 * Get Description Xml.
	 *
	 * @param serverId Server UUID.
	 */
	public suspend fun getDescriptionXml2(serverId: String): Response<String> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["serverId"] = serverId
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.`get`<String>("/Dlna/{serverId}/description.xml", pathParameters,
				queryParameters, data)
		return response
	}

	/**
	 * Gets a server icon.
	 *
	 * @param serverId Server UUID.
	 * @param fileName The icon filename.
	 */
	public suspend fun getIconId(serverId: String, fileName: String): Response<ByteReadChannel> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["serverId"] = serverId
		pathParameters["fileName"] = fileName
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.`get`<ByteReadChannel>("/Dlna/{serverId}/icons/{fileName}", pathParameters,
				queryParameters, data)
		return response
	}

	/**
	 * Gets a server icon.
	 *
	 * @param serverId Server UUID.
	 * @param fileName The icon filename.
	 */
	public fun getIconIdUrl(serverId: String, fileName: String): String {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["serverId"] = serverId
		pathParameters["fileName"] = fileName
		val queryParameters = emptyMap<String, Any?>()
		return api.createUrl("/Dlna/{serverId}/icons/{fileName}", pathParameters, queryParameters)
	}

	/**
	 * Gets Dlna media receiver registrar xml.
	 *
	 * @param serverId Server UUID.
	 */
	public suspend fun getMediaReceiverRegistrar(serverId: String): Response<String> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["serverId"] = serverId
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.`get`<String>("/Dlna/{serverId}/MediaReceiverRegistrar", pathParameters,
				queryParameters, data)
		return response
	}

	/**
	 * Process a media receiver registrar control request.
	 *
	 * @param serverId Server UUID.
	 */
	public suspend fun processMediaReceiverRegistrarControlRequest(serverId: String):
			Response<ControlResponse> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["serverId"] = serverId
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.post<ControlResponse>("/Dlna/{serverId}/MediaReceiverRegistrar/Control",
				pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Gets Dlna media receiver registrar xml.
	 *
	 * @param serverId Server UUID.
	 */
	public suspend fun getMediaReceiverRegistrar2(serverId: String): Response<String> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["serverId"] = serverId
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.`get`<String>("/Dlna/{serverId}/MediaReceiverRegistrar/MediaReceiverRegistrar",
				pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Gets Dlna media receiver registrar xml.
	 *
	 * @param serverId Server UUID.
	 */
	public suspend fun getMediaReceiverRegistrar3(serverId: String): Response<String> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["serverId"] = serverId
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response =
				api.`get`<String>("/Dlna/{serverId}/MediaReceiverRegistrar/MediaReceiverRegistrar.xml",
				pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Gets a server icon.
	 *
	 * @param fileName The icon filename.
	 */
	public suspend fun getIcon(fileName: String): Response<ByteReadChannel> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["fileName"] = fileName
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.`get`<ByteReadChannel>("/Dlna/icons/{fileName}", pathParameters,
				queryParameters, data)
		return response
	}

	/**
	 * Gets a server icon.
	 *
	 * @param fileName The icon filename.
	 */
	public fun getIconUrl(fileName: String): String {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["fileName"] = fileName
		val queryParameters = emptyMap<String, Any?>()
		return api.createUrl("/Dlna/icons/{fileName}", pathParameters, queryParameters)
	}
}
